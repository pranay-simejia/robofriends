{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","id","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZJ,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,GAAGC,EAAU,EAAVA,MACjB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,WACpD,6BACI,4BAAKL,GACL,2BAAIE,MCULI,EAfA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEb,OAEA,6BACGA,EAAOC,KAAI,SAACC,EAAKC,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EACVT,GAAIM,EAAOG,GAAGT,GACdD,KAAMO,EAAOG,GAAGV,KAChBE,MAAOK,EAAOG,GAAGR,aCEhBU,EAZC,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC3B,OACI,6BACA,2BACAX,UAAU,mCACVY,KAAK,SACJC,YAAY,gBACZC,SAAUH,MCGJI,G,MATD,SAACC,GACX,OACI,yBAAKC,MAAO,CAACC,SAAU,SAASC,OAAQ,kBAAmBC,OAAQ,UAC9DJ,EAAMK,YC0CJC,E,kDAxCX,aAAe,IAAD,8BACV,gBAeJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACf,YAAcc,EAAME,OAAOC,SAd1C,EAAKC,MAAM,CACPxB,OAAQ,GACRM,YAAa,IALP,E,gEAQM,IAAD,OACfmB,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GAAS,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAQjC,IAAD,OACEC,EAAeC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAC,GAC1C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKX,MAAMlB,YAAY4B,kBAEnE,OAA8B,IAA3BH,KAAKP,MAAMxB,OAAOoC,OACd,wBAAIxC,UAAU,MAAd,cAEV,yBAAKA,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAE9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUnB,OAAQ8B,U,GAlCdO,aCClBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4baf9fac.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nconst Card=({name,id,email})=> {\r\n    return(\r\n        <div className=' tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList=({robots})=>{\r\n\r\n    return(\r\n\r\n    <div>\r\n      {robots.map((user,i)=>{\r\n      return <Card key={i} \r\n              id={robots[i].id} \r\n              name={robots[i].name} \r\n              email={robots[i].email}/> \r\n              \r\n  })}\r\n    </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield, searchChange})=> {\r\n    return(\r\n        <div >\r\n        <input \r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n         placeholder=\"Your RoboToon\"\r\n         onChange={searchChange}\r\n         />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react'\r\n\r\n\r\nconst Scroll =(props) =>{ \r\n    return(\r\n        <div style={{overflow: 'scroll',border: '1px solid black', height: '800px'}}>\r\n           { props.children}\r\n            \r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\n\r\nclass App extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state={\r\n            robots: [],\r\n            searchfield :''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n            return response.json();\r\n        })\r\n        .then(users =>{this.setState({robots: users});\r\n        } )\r\n        \r\n    }\r\n    onSearchChange=(event) => {\r\n        this.setState({searchfield : event.target.value})\r\n    }\r\n\r\n    render(){\r\n        const filteredRobots=this.state.robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n         if(this.state.robots.length===0)\r\n         return <h1 className='tc'>Loading...</h1>\r\n        return(\r\n      <div className=\"tc\"> \r\n          <h1>RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange}/>\r\n          \r\n          <Scroll > \r\n              <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n          \r\n      </div>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}